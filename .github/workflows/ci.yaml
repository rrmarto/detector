name: Flutter Versioning and Release Build

on:
  push:
    branches:
      - main

jobs:
  versioning_and_build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2
        
      # Set up Git user for commits
      - name: Set up Git user info for commits
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/rrmarto/detector.git    

      # Step 2: Set up Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'

      # Step 3: Get the last git tag (version) if it exists
      - name: Get last version tag
        id: get_last_version
        run: |
          git fetch --tags
          # Get the last tag or indicate that no tags exist
          LAST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          echo "LAST_VERSION=$LAST_VERSION" >> $GITHUB_ENV
          echo "Last version: $LAST_VERSION"

      # Step 4: Get latest commit messages
      - name: Get latest commit messages
        id: get_commits
        run: |
          if [ "${{ env.LAST_VERSION }}" = "none" ]; then
            # If no tags exist, get all commits from the initial commit
            COMMITS=$(git log --oneline)
          else
            # If a previous tag exists, get commits from that tag onward
            COMMITS=$(git log ${{ env.LAST_VERSION }}..HEAD --oneline)
          fi
          echo "COMMITS=$COMMITS" >> $GITHUB_ENV
          echo "Commit log: $COMMITS"

      # Step 5: Determine the type of version bump (major, minor, patch)
      - name: Bump version number
        id: bump_version
        run: |
          LAST_VERSION=${{ env.LAST_VERSION }}
          VERSION="${LAST_VERSION:1}"
          IFS='.' read -r major minor patch <<< "$VERSION"
          
          # Default build number
          build=1
          
          # Bump version based on commit history
          if git log v${{ env.LAST_VERSION }}..HEAD --oneline | grep -i feat; then
            minor=$((minor+1))
            patch=0
          elif git log v${{ env.LAST_VERSION }}..HEAD --oneline | grep -i fix; then
            patch=$((patch+1))
          fi

          # Construct the final version with build number
          FINAL_VERSION="v$major.$minor.$patch+$build"
          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV

      - name: Update version in pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: ${{ env.FINAL_VERSION }}/" pubspec.yaml
          cat pubspec.yaml

      # Step 7: Commit and push version changes
      - name: Commit version changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/rrmarto/detector.git    
          git add pubspec.yaml
          git commit -m "ci: bump version to $FINAL_VERSION"
          git tag "v$FINAL_VERSION"
          git push origin main --tags

      # Step 8: Build the release APK
      - name: Build Flutter release APK
        run: flutter build apk --release

      # Step 9: Upload the APK as an artifact
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk